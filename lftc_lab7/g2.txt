N = program tempDecl declList declaration variableDeclaration constDeclaration typeConst arrayDecl type stmtList stmt simplStmt assignStmt expression term factor ioStmt stringExp structStmt ifStmt tempElifStmt elseStmt elifStmt whileStmt condition relation
E = + - * / < <= = >= > == % ! != # [ ] { } # “ ” ‘ ’ ; ( ) func int string bool if elif else let var True False read write loop START END identifier constant integer string boolean E
S = program
P =
program -> START tempDecl END
tempDecl -> E | declList tempDecl | stmtList tempDecl | stmt
declList -> declaration | declaration declList
declaration -> variableDeclaration | constDeclaration
variableDeclaration -> var identifier # type = expression ; | var identifier # type ;
constDeclaration -> let identifier # type = expression ;
typeConst -> int | string | bool
arrayDecl -> [ typeConst ]
type -> typeConst | arrayDecl
stmtList -> stmt | stmt stmtList
stmt -> simplStmt | structStmt
simplStmt -> assignStmt | ioStmt
assignStmt -> identifier = expression ;
expression -> term + expression | term - expression | term | boolean
term -> factor * term | factor / term | factor % term | factor
factor -> ( expression ) | identifier | integer
ioStmt -> read ( identifier ) ; | write ( stringExp ) ;
stringExp -> string | identifier
structStmt -> ifStmt | whileStmt
ifStmt -> if condition { stmtList } tempElifStmt | if condition { stmtList } tempElifStmt elseStmt
tempElifStmt -> E | tempElifStmt elifStmt
elseStmt -> else { stmtList }
elifStmt -> elif condition { stmtList }
whileStmt -> loop condition { stmtList }
condition -> expression relation expression
relation -> < | <= | = | >= | > | !=